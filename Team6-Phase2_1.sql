-- Team6 DDL

CREATE TABLE USERS(
    ID_NUMBER CHAR(12) NOT NULL , -- 11 DIGIT
    NAME VARCHAR2(30) NOT NULL ,
    SEX CHAR(1) NOT NULL , -- 'M' OR 'F'
    YOB CHAR(4) , -- ONLY YEAR
    JOB VARCHAR2(100) ,
    PASSWD VARCHAR2(20) NOT NULL ,
    CHECK ( LENGTH(PASSWD) > 8 ) ,
    CHECK ( ID_NUMBER LIKE 'U%') ,
    CHECK ( ID_NUMBER LIKE '____-__-____') ,
    CHECK ( SEX LIKE 'M' OR SEX LIKE 'F') ,
    PRIMARY KEY (ID_NUMBER)
);

CREATE TABLE MANAGER(
    ID_NUMBER CHAR(12) NOT NULL ,
    BANK_ACCOUNT VARCHAR2(20) NOT NULL ,
    PRIMARY KEY (ID_NUMBER)
);

CREATE TABLE MEMBER(
    ID_NUMBER CHAR(12) NOT NULL ,
    PREPAID_MONEY NUMBER ,
    PRIMARY KEY (ID_NUMBER)
);

CREATE TABLE MAN_EVAL_MEM(
    MEM_ID CHAR(12) NOT NULL ,
    MAN_ID CHAR(12) NOT NULL ,
    EVAL_TIER CHAR(1) ,
    UPDATE_TIME DATE ,
    PRIMARY KEY (MEM_ID, MAN_ID)
);

CREATE TABLE TEAM(
    TEAM_ID CHAR(12) NOT NULL ,
    TEAM_NAME VARCHAR2(20) NOT NULL ,
    CHECK ( TEAM_ID LIKE '____-__-____') ,
    CHECK ( TEAM_ID LIKE 'T%') ,
    PRIMARY KEY (TEAM_ID)
);

CREATE TABLE TEAM_MEM(
    TEAM_ID CHAR(12) NOT NULL ,
    MEM_ID CHAR(12) NOT NULL ,
    PRIMARY KEY (TEAM_ID, MEM_ID)
);

CREATE TABLE TRAINING(
    CLASS_ID CHAR(12) NOT NULL ,
    DATE_TIME DATE NOT NULL ,
    TUTOR_ID CHAR(12) NOT NULL ,
    RECOMMEND_TIER CHAR(1) NOT NULL ,
    SUBJECT VARCHAR2(20) ,
    PLACE VARCHAR2(100) ,
    MAX_NUM NUMBER NOT NULL ,
    WAGE NUMBER ,
    COST_PER_ONE NUMBER ,
    PRIMARY KEY (CLASS_ID)
);

CREATE TABLE TRAIN_ENROLLS(
    CLASS_ID CHAR(12) NOT NULL ,
    TUTEE_ID CHAR(12) NOT NULL ,
    PRIMARY KEY (CLASS_ID, TUTEE_ID)
);

CREATE TABLE MATCH(
    MATCH_ID CHAR(12) NOT NULL ,
    DATE_TIME DATE NOT NULL ,
    PLACE_ID CHAR(13) NOT NULL ,
    TYPE CHAR(1) NOT NULL , -- 'F' = FUTSAL, 'S' = SOCCER
    MAX_NUM NUMBER NOT NULL ,
    SEX_CONSTRAINT CHAR(1) , -- 'M' = ONLY MALE, 'F' = ONLY FEMALE, NULL = NO RESTRICT
    MANAGER_ID CHAR(12) ,
    WAGE NUMBER ,
    COST_PER_ONE NUMBER ,
    CHECK ( TYPE LIKE 'F' OR TYPE LIKE 'S') ,
    CHECK ( MATCH_ID LIKE '____-__-____') ,
    CHECK ( MATCH_ID LIKE 'M%') ,
    PRIMARY KEY (MATCH_ID)
);

CREATE TABLE MATCH_APP_MEMBER(
    MATCH_ID CHAR(12) NOT NULL ,
    MEMBER_ID CHAR(12) NOT NULL ,
    PRIMARY KEY (MATCH_ID, MEMBER_ID)
);

CREATE TABLE FIELD(
    FIELD_ID CHAR(13) NOT NULL ,
    NAME VARCHAR2(20) NOT NULL ,
    FIELD_HP VARCHAR2(20) ,
    OWNER_HP VARCHAR2(20) NOT NULL ,
    ADDRESS VARCHAR2(100) NOT NULL ,
    CHECK ( FIELD_ID LIKE '_____-__-____') ,
    CHECK ( FIELD_ID LIKE 'F%') ,
    PRIMARY KEY (FIELD_ID)
);

CREATE TABLE OWNER(
    OWNER_HP VARCHAR2(20) NOT NULL ,
    NAME VARCHAR2(20) NOT NULL ,
    PRIMARY KEY (OWNER_HP)
);

COMMIT;

ALTER TABLE MANAGER ADD (
    FOREIGN KEY (ID_NUMBER) REFERENCES USERS (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER MANAGER_TRG
AFTER UPDATE OF ID_NUMBER ON USERS
FOR EACH ROW
BEGIN
    UPDATE MANAGER
    SET ID_NUMBER = :NEW.ID_NUMBER
    WHERE ID_NUMBER = :OLD.ID_NUMBER;
END;

ALTER TABLE MEMBER ADD (
    FOREIGN KEY (ID_NUMBER) REFERENCES USERS (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER MEMBER_TRG
AFTER UPDATE OF ID_NUMBER ON USERS
FOR EACH ROW
BEGIN
    UPDATE MEMBER
    SET ID_NUMBER = :NEW.ID_NUMBER
    WHERE ID_NUMBER = :OLD.ID_NUMBER;
END;

ALTER TABLE MAN_EVAL_MEM ADD(
    FOREIGN KEY (MEM_ID) REFERENCES MEMBER (ID_NUMBER) ON DELETE CASCADE,
    FOREIGN KEY (MAN_ID) REFERENCES MANAGER (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER MAN_EVAL_MEM_MAN_TRG
AFTER UPDATE OF ID_NUMBER ON MANAGER
FOR EACH ROW
BEGIN
    UPDATE MAN_EVAL_MEM
    SET MAN_ID = :NEW.ID_NUMBER
    WHERE MAN_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE TRIGGER MAN_EVAL_MEM_MEM_TRG
AFTER UPDATE OF ID_NUMBER ON MEMBER
FOR EACH ROW
BEGIN
    UPDATE MAN_EVAL_MEM
    SET MEM_ID = :NEW.ID_NUMBER
    WHERE MEM_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE VIEW MEMBER_EVAL_VIEW AS
    SELECT MEM_ID, CHR(AVG(ASCII(EVAL_TIER))) AS TIER
    FROM MAN_EVAL_MEM
    WHERE UPDATE_TIME - SYSDATE <= 60
    GROUP BY MEM_ID;

ALTER TABLE TEAM_MEM ADD(
    FOREIGN KEY (TEAM_ID) REFERENCES TEAM (TEAM_ID) ON DELETE CASCADE,
    FOREIGN KEY (MEM_ID) REFERENCES MEMBER (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER TEAM_MEM_TEAM_TRG
AFTER UPDATE OF TEAM_ID ON TEAM
FOR EACH ROW
BEGIN
    UPDATE TEAM_MEM
    SET TEAM_ID = :NEW.TEAM_ID
    WHERE TEAM_ID = :OLD.TEAM_ID;
END;

CREATE OR REPLACE TRIGGER TEAM_MEM_MEM_TRG
AFTER UPDATE OF ID_NUMBER ON MEMBER
FOR EACH ROW
BEGIN
    UPDATE TEAM_MEM
    SET MEM_ID = :NEW.ID_NUMBER
    WHERE MEM_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE VIEW TEAM_EVAL_VIEW AS
    SELECT TEAM_ID, CHR(AVG(ASCII(TIER))) AS TEAM_TIER
    FROM TEAM_MEM TM INNER JOIN MEMBER_EVAL_VIEW EV ON TM.MEM_ID = EV.MEM_ID
    GROUP BY TEAM_ID;

CREATE OR REPLACE VIEW TRAIN_CNT_VIEW AS
    SELECT CLASS_ID, COUNT(TUTEE_ID) AS CNT
    FROM TRAIN_ENROLLS
    GROUP BY CLASS_ID;

ALTER TABLE TRAINING ADD (
    FOREIGN KEY (TUTOR_ID) REFERENCES MEMBER (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER TRAINING_TRG
AFTER UPDATE OF ID_NUMBER ON MEMBER
FOR EACH ROW
BEGIN
    UPDATE TRAINING
    SET TUTOR_ID = :NEW.ID_NUMBER
    WHERE TUTOR_ID = :OLD.ID_NUMBER;
END;

ALTER TABLE TRAIN_ENROLLS ADD(
    FOREIGN KEY (CLASS_ID) REFERENCES TRAINING (CLASS_ID) ON DELETE CASCADE,
    FOREIGN KEY (TUTEE_ID) REFERENCES MEMBER (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER TRAIN_ENR_CLASS_TRG
AFTER UPDATE OF CLASS_ID ON TRAINING
FOR EACH ROW
BEGIN
    UPDATE TRAIN_ENROLLS
    SET CLASS_ID = :NEW.CLASS_ID
    WHERE CLASS_ID = :OLD.CLASS_ID;
END;

CREATE OR REPLACE TRIGGER TRAIN_ENR_MEM_TRG
AFTER UPDATE OF ID_NUMBER ON MEMBER
FOR EACH ROW
BEGIN
    UPDATE TRAIN_ENROLLS
    SET TUTEE_ID = :NEW.ID_NUMBER
    WHERE TUTEE_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE VIEW MATCH_CNT_VIEW AS
    SELECT MATCH_ID, COUNT(MEMBER_ID) AS CNT
    FROM MATCH_APP_MEMBER
    GROUP BY MATCH_ID;

ALTER TABLE MATCH ADD(
    FOREIGN KEY (PLACE_ID) REFERENCES FIELD (FIELD_ID) ON DELETE CASCADE ,
    FOREIGN KEY (MANAGER_ID) REFERENCES MANAGER (ID_NUMBER) ON DELETE SET NULL
    );

CREATE OR REPLACE TRIGGER MATCH_PLACE_TRG
AFTER UPDATE OF FIELD_ID ON FIELD
FOR EACH ROW
BEGIN
    UPDATE MATCH
    SET PLACE_ID = :NEW.FIELD_ID
    WHERE PLACE_ID = :OLD.FIELD_ID;
END;

CREATE OR REPLACE TRIGGER MATCH_MANAGER_TRG
AFTER UPDATE OF ID_NUMBER ON MANAGER
FOR EACH ROW
BEGIN
    UPDATE MATCH
    SET MANAGER_ID = :NEW.ID_NUMBER
    WHERE MANAGER_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE VIEW MATCH_EVAL_VIEW AS
    SELECT MATCH_ID, CHR(AVG(ASCII(TIER))) AS MATCH_TIER
    FROM MATCH_APP_MEMBER AP INNER JOIN MEMBER_EVAL_VIEW EV ON AP.MEMBER_ID = EV.MEM_ID
    GROUP BY MATCH_ID;

ALTER TABLE MATCH_APP_MEMBER ADD(
    FOREIGN KEY (MATCH_ID) REFERENCES MATCH (MATCH_ID) ON DELETE CASCADE,
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (ID_NUMBER) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER MATCH_APP_MEM_MEM_TRG
AFTER UPDATE OF ID_NUMBER ON MEMBER
FOR EACH ROW
BEGIN
    UPDATE MATCH_APP_MEMBER
    SET MEMBER_ID = :NEW.ID_NUMBER
    WHERE MEMBER_ID = :OLD.ID_NUMBER;
END;

CREATE OR REPLACE TRIGGER MATCH_APP_MEM_MATCH_TRG
AFTER UPDATE OF MATCH_ID ON MATCH
FOR EACH ROW
BEGIN
    UPDATE MATCH_APP_MEMBER
    SET MATCH_ID = :NEW.MATCH_ID
    WHERE MATCH_ID = :OLD.MATCH_ID;
END;

ALTER TABLE FIELD ADD(
    FOREIGN KEY (OWNER_HP) REFERENCES OWNER (OWNER_HP) ON DELETE CASCADE
    );

CREATE OR REPLACE TRIGGER FIELD_TRG
AFTER UPDATE OF OWNER_HP ON OWNER
FOR EACH ROW
BEGIN
    UPDATE FIELD
    SET OWNER_HP = :NEW.OWNER_HP
    WHERE OWNER_HP = :OLD.OWNER_HP;
END;



COMMIT;