-- lab 6-1-1
SELECT DNAME, NUM_EE
FROM (
    SELECT DNO, COUNT(*) NUM_EE, AVG(SALARY) AVG_SAL
    FROM EMPLOYEE
    GROUP BY DNO
    ) EX INNER JOIN DEPARTMENT D  ON EX.DNO = D.DNUMBER
WHERE AVG_SAL >= 20000 AND AVG_SAL <= 40000
ORDER BY NUM_EE ASC;
-- ans :
-- Administration,3
-- Research,4

-- lab 6-1-2
SELECT DNUMBER, DNAME, MALES
FROM (
    SELECT DNO, COUNT(*) AS MALES
    FROM EMPLOYEE
    WHERE SEX = 'M' AND SALARY <= 40000
    GROUP BY DNO
     ) A INNER JOIN DEPARTMENT D ON A.DNO = D.DNUMBER
ORDER BY DNAME DESC;
-- ans :
-- 5,Research,3
-- 4,Administration,1

-- lab 6-2-1
SELECT FNAME, LNAME, SALARY
FROM EMPLOYEE
WHERE SEX = 'F' AND NOT EXISTS (
    SELECT 1
    FROM (
        SELECT DISTINCT ESSN
        FROM WORKS_ON WO INNER JOIN (
            SELECT PNUMBER
            FROM PROJECT
            WHERE DNUM != 4
        ) PJ ON WO.PNO = PJ.PNUMBER
        MINUS
        SELECT DISTINCT ESSN
        FROM WORKS_ON WO INNER JOIN (
            SELECT PNUMBER
            FROM PROJECT
            WHERE DNUM = 4
        ) PJ ON WO.PNO = PJ.PNUMBER
    ) X
    WHERE EMPLOYEE.SSN = X.ESSN
)
ORDER BY SALARY ASC;
-- ans :
-- Alica,Zelaya,25000
-- Jennifer,Wallace,43000

-- lab 6-2-2
SELECT DNO, FNAME, LNAME
FROM (
    SELECT DISTINCT E2.SUPER_SSN
    FROM EMPLOYEE E2 INNER JOIN EMPLOYEE E3 ON E3.SSN = E2.SUPER_SSN
    ) A
    INNER JOIN (
    SELECT DNO, FNAME, LNAME, SSN
    FROM EMPLOYEE E1
    WHERE NOT EXISTS(
        SELECT 1
        FROM DEPENDENT D
        WHERE E1.SSN = D.ESSN
        )
    ) B ON A.SUPER_SSN = B.SSN;
-- ans :
-- 1,James,Borg

-- lab 6-3-1
SELECT LNAME, FNAME, SALARY
FROM EMPLOYEE
WHERE DNO IN (
    SELECT DNO
    FROM EMPLOYEE
    WHERE SALARY = (
        SELECT MAX(SALARY)
        FROM EMPLOYEE EA
    )
);
-- ans :
-- Borg,James,55000

-- lab 6-3-2
WITH RECURSIVE(SSN, SUPER_SSN) AS(
    SELECT E1.SSN, E1.SUPER_SSN
    FROM EMPLOYEE E1
    UNION ALL
    SELECT E2.SSN, RX.SUPER_SSN
    FROM EMPLOYEE E2, RECURSIVE RX
    WHERE E2.SUPER_SSN = RX.SSN AND RX.SUPER_SSN = '987654321'
)
SELECT FNAME, LNAME
FROM EMPLOYEE EX INNER JOIN (
    SELECT SSN, SUPER_SSN
    FROM RECURSIVE MINUS (
        SELECT SSN, SUPER_SSN
        FROM EMPLOYEE E
    )
) X ON X.SSN = EX.SSN;
-- ans : result does not exist

-- lab 6-3-3
SELECT EX.FNAME, EX.LNAME, EX.ADDRESS, EX.SALARY
FROM EMPLOYEE EX
WHERE EX.SALARY >= (
    SELECT AVG(SALARY)
    FROM EMPLOYEE
    ) + 3000;
-- ans :
-- Franklin,Wong,"638 Voss, Houston, TX",40000
-- Jennifer,Wallace,"291 Berry, Bellaire, TX",43000
-- James,Borg,"450 Stone, Houston, TX",55000

-- lab 6-4-1
CREATE VIEW DEPT_SUMMARY (D, C, TOTAL_S, AVG_S, MN_S, MX_S) AS
    SELECT DNO, COUNT(*) AS NEMPS, SUM(SALARY), ROUND(AVG(SALARY), 1), MIN(SALARY), MAX(SALARY)
    FROM EMPLOYEE
    GROUP BY DNO
    ORDER BY NEMPS;
COMMIT;
SELECT *
FROM DEPT_SUMMARY;
-- ans :
-- 1,1,55000,55000,55000,55000
-- 4,3,93000,31000,25000,43000
-- 5,4,133000,33250,25000,40000

-- lab 6-4-2
SELECT *
FROM DEPT_SUMMARY
WHERE D = 5;
-- ans : 5,4,133000,33250,25000,40000

-- lab 6-4-3
SELECT D, C, AVG_S
FROM DEPT_SUMMARY
WHERE AVG_S BETWEEN 30000 AND 40000;
-- ans :
-- 4,3,31000
-- 5,4,33250

-- lab 6-4-4
SELECT D, AVG_S, MN_S, MX_S
FROM DEPT_SUMMARY
WHERE MN_S >= (
    SELECT AVG_S
    FROM DEPT_SUMMARY
    WHERE D = 5
    )
ORDER BY AVG_S DESC ;
-- ans : 1,55000,55000,55000

-- lab 6-4-5
/* UPDATE DEPT_SUMMARY
SET D=5
WHERE D=4;

SELECT *
FROM DEPT_SUMMARY;

ROLLBACK; */
-- ans : err. 뷰의 데이터를 직접 수정하는 것은 불가능하다. 테이블에서 참조만 해오기 때문

-- lab 6-4-6
/*DELETE FROM DEPT_SUMMARY
WHERE C BETWEEN 2 AND 4;

SELECT *
FROM DEPT_SUMMARY;

ROLLBACK; */
-- ANS : err. 뷰의 데이터를 직접 삭제하는 것은 불가능하다. 테이블에서 참조만 해오기 때문

CREATE OR REPLACE
TRIGGER SALARY_VIOLATION
-- EVENT
BEFORE INSERT OR UPDATE OF SALARY, SUPER_SSN ON EMPLOYEE
FOR EACH ROW
    -- CONDITION
    BEGIN
        DBMS_OUTPUT.PUT_LINE('OLD SALARY' + :OLD.SALARY);
        DBMS_OUTPUT.PUT_LINE('[ALERT]NEW SALARY' + :NEW.SALARY);
        DBMS_OUTPUT.PUT_LINE('SALARY DIFFERENCE = ' + (:NEW.SALARY-:OLD.SALARY));
        DBMS_OUTPUT.PUT_LINE('UPDATE COMPANY.EMPLOYEE');

        IF (:NEW.SALARY > 100000) THEN
        RAISE_APPLICATION_ERROR(20111, 'The new salary cannot exceed 100000');
        RAISE_APPLICATION_ERROR(20111, 'The new salary cannot exceed 100000');
        RAISE_APPLICATION_ERROR(20111, 'The new salary cannot exceed 100000');
        END IF;
    END SALARY_VIOLATION;
COMMIT ;


ALTER TRIGGER SALARY_VIOLATION ENABLE;
COMMIT ;

--SET SERVEROUTPUT ON;
UPDATE COMPANY.EMPLOYEE
SET SALARY = SALARY * 2
WHERE SSN = '888665555';

ROLLBACK ;


