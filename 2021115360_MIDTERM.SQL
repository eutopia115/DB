-- a
SELECT ins.name, ins.DEPT_NAME
FROM INSTRUCTOR Ins INNER JOIN COURSE CR ON INS.DEPT_NAME = CR.DEPT_NAME
WHERE SALARY <=58000 AND NOT EXISTS (
    SELECT COURSE_ID
    FROM COURSE C
    WHERE ins.DEPT_NAME = C.DEPT_NAME);

-- b
SELECT s.YEAR, s.SEMESTER, COUNT(*) as NUM_STUDENT
FROM SECTION s, STUDENT st
WHERE s.SEMESTER != 'Summer' and st.ID not in(
    SELECT DISTINCT t.id
    from TAKES t
    WHERE t.YEAR = s.YEAR and t.SEMESTER = s.SEMESTER)
GROUP BY (YEAR, SEMESTER)
ORDER BY year desc;
-- c ok
SELECT NAME, TOT_CRED
FROM STUDENT
WHERE STUDENT.id in (
SELECT ID
FROM TAKES
WHERE SEMESTER = 'Fall' and course_id in (
    SELECT DISTINCT COURSE.COURSE_ID
    FROM COURSE INNER JOIN takes t on t.COURSE_ID = COURSE.COURSE_ID
    WHERE CREDITS >= 3 and SEMESTER = 'Fall')
    )
ORDER BY TOT_CRED DESC ;

-- d ok
SELECT TAKES.COURSE_ID, count(*) as STU_CNT
FROM TAKES INNER JOIN COURSE ON TAKES.COURSE_ID = COURSE.COURSE_ID
WHERE DEPT_NAME = 'Computer Science' and GRADE = 'A+'
GROUP BY TAKES.COURSE_ID
ORDER BY COURSE_ID;

-- e
SELECT DEPT_NAME, NAME
FROM INSTRUCTOR
WHERE INSTRUCTOR.ID in (SELECT DISTINCT tc.id
FROM TAKES inner JOIN TEACHES tc on TAKES.COURSE_ID = tc.COURSE_ID
where TAKES.ID in (
    SELECT T.ID
    FROM TAKES T
    WHERE GRADE = 'B-' or GRADE = 'B' or GRADE = 'B+' or GRADE = 'A-' or GRADE = 'A+' or GRADE = 'A'
    GROUP BY T.ID
    HAVING count(*) >= 2))
ORDER BY DEPT_NAME;


-- f
SELECT t.id, sum(c2.CREDITS) as SUM_CRED
FROM TAKES t INNER JOIN knu.course c2 ON t.course_id = c2.course_id, STUDENT
WHERE GRADE = 'B-' or GRADE = 'B' or GRADE = 'B+' or GRADE = 'A-' or GRADE = 'A+' or GRADE = 'A'
        and t.id in(SELECT DISTINCT STUDENT.ID
                    FROM STUDENT INNER JOIN knu.takes t2 ON student.id = t2.id
                    WHERE GRADE = 'B-' or GRADE = 'B' or GRADE = 'B+' or GRADE = 'A-' or GRADE = 'A+' or GRADE = 'A'
                        and DEPT_NAME in (SELECT dept_name
                                        FROM univ_dept
                                        WHERE budget > 50000))
GROUP BY t.ID;

-- g ok
SELECT YEAR, SEMESTER, sum(CREDITS)
FROM SECTION INNER JOIN knu.course c2 ON c2.course_id = section.COURSE_ID
WHERE SEMESTER != 'Summer'
GROUP BY ROLLUP (YEAR, SEMESTER)
ORDER BY YEAR DESC, SEMESTER ASC;

-- H OK
SELECT DEPT_NAME, NAME
FROM (SELECT ROWNUM AS RR, DEPT_NAME, NAME
FROM STUDENT INNER JOIN (
SELECT ID
FROM (SELECT DISTINCT T.ID, T.GRADE, T.COURSE_ID
    FROM TAKES T INNER JOIN (SELECT COURSE_ID
                            FROM TEACHES
                            WHERE ID IN (SELECT ID
                                        FROM (SELECT ROWNUM AS RANK, ID
                                                FROM (SELECT SALARY, ID
                                                        FROM INSTRUCTOR
                                                        ORDER BY SALARY))
    WHERE RANK = 3)) X ON X.COURSE_ID = T.COURSE_ID
ORDER BY GRADE)) P ON STUDENT.ID = P.ID)
WHERE RR = 2;



-- I
SELECT INSTRUCTOR.DEPT_NAME, SUM(SALARY) AS TOT_SAL, COUNT(*) AS NUM_INSTRUCTORS
FROM INSTRUCTOR INNER JOIN ((SELECT DEPT_NAME, CNT
FROM (SELECT ROWNUM AS AR, DEPT_NAME, CNT
FROM (SELECT DEPT_NAME, COUNT(IT.DEPT_NAME) AS CNT
FROM INSTRUCTOR IT
GROUP BY IT.DEPT_NAME
ORDER BY CNT ASC))
WHERE CNT = 1)
UNION
(SELECT DEPT_NAME, CNT
FROM (SELECT ROWNUM AS DR, DEPT_NAME, CNT
FROM (SELECT DEPT_NAME, COUNT(IT.DEPT_NAME) AS CNT
FROM INSTRUCTOR IT
GROUP BY IT.DEPT_NAME
ORDER BY CNT DESC)
) WHERE DR = 1
) ORDER BY CNT DESC ) X ON INSTRUCTOR.DEPT_NAME = X.DEPT_NAME
GROUP BY INSTRUCTOR.DEPT_NAME
ORDER BY COUNT(*) DESC, DEPT_NAME ASC ;

-- BONUS

SELECT ROWNUM AS RR
FROM (
    SELECT DEPT_NAME
    FROM UNIV_DEPT
    ORDER BY BUDGET)

